name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: sqlite, pdo_sqlite
          tools: composer

      - name: Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP Dependencies
        working-directory: backend
        run: composer install --no-progress --no-suggest --prefer-dist

      - name: Run PHP Tests (PHPUnit)
        working-directory: backend
        run: |
          ./vendor/bin/phpunit --coverage-text \
          --coverage-clover coverage-report-backend/clover.xml \
          --log-junit junit-report-backend.xml tests

      - name: Upload JUnit Test Report for Backend
        uses: actions/upload-artifact@v4
        with:
          name: junit-report-backend
          path: backend/junit-report-backend.xml

      - name: Download SQLite JDBC Driver
        run: |
          mkdir -p db/lib
          curl -L -o db/lib/sqlite-jdbc.jar https://repo1.maven.org/maven2/org/xerial/sqlite-jdbc/3.42.0.0/sqlite-jdbc-3.42.0.0.jar

      - name: Run Liquibase migrations (SQLite)
        working-directory: backend
        run: |
          docker run --rm \
            -v "${{ github.workspace }}/backend:/workspace" \
            -v "${{ github.workspace }}/db/changelogs:/workspace/changelogs" \
            -v "${{ github.workspace }}/db/lib:/workspace/lib" \
            liquibase/liquibase \
            --url="jdbc:sqlite:/workspace/todo.sqlite3" \
            --changeLogFile=changelogs/db.changelog-master.xml \
            --driver=org.sqlite.JDBC \
            --classpath=/workspace/lib/sqlite-jdbc.jar \
            --search-path=/workspace \
            update

      - name: Install Newman
        run: npm install -g newman

      - name: Start PHP Server
        working-directory: backend
        run: |
          php -S 127.0.0.1:8000 -t . > server.log 2>&1 &
          echo "Server started in background."

      - name: Wait for Server
        run: |
          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:8000 >/dev/null; then
              echo "✅ Server is up!"
              exit 0
            fi
            echo "Waiting for server..."
            sleep 2
          done
          echo "❌ Server failed to start. Dumping log:"
          cat backend/server.log
          exit 1

      - name: Run Postman Tests
        run: |
          newman run backend/tests/postman/todo_api_collection.json \
            -r cli,json \
            --reporter-json-export backend/newman-results.json

      - name: Upload Newman Report
        uses: actions/upload-artifact@v4
        with:
          name: newman-report
          path: backend/newman-results.json

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=viggidbest_PHP-TODO
            -Dsonar.organization=viggidbest
            -Dsonar.sources=backend
            -Dsonar.tests=backend/tests
            -Dsonar.php.coverage.reportPaths=coverage-report-backend/clover.xml
            -Dsonar.exclusions=backend/tests/**
            -Dsonar.verbose=true
            
      - name: Check Sonar Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io


  frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'

      - name: Cache npm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Node.js Dependencies
        run: npm install --prefix frontend

      - name: Run Vue.js Tests
        run: npm run test --prefix frontend

      - name: Snyk Code Scan (Frontend)
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --severity-threshold=medium
          project: frontend

      - name: Upload Test Report for Frontend
        uses: actions/upload-artifact@v4
        with:
          name: junit-report-frontend
          path: frontend/test-results.xml

  deploy_prod:

    if: github.ref == 'refs/heads/main'
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    name: "Deploy to Production"     # <— THIS is what DevLake will match
    steps:
      - name: Placeholder deploy
        run: echo "Deploying to prod…"
 