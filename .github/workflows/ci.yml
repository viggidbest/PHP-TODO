name: CI Pipeline

on:
  push:
    branches:
      - main      # Trigger on commits to the main branch
      - develop   # Trigger on commits to the develop branch
  pull_request:
    branches:
      - main      # Trigger on PRs to the main branch

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'  # Adjust the PHP version based on your requirements

      # Step 3: Cache Composer dependencies
      - name: Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Step 4: Install PHP dependencies
      - name: Install PHP Dependencies
        working-directory: backend
        run: composer install --no-progress --no-suggest --prefer-dist

      # Step 5: Run backend tests (PHPUnit)
      - name: Run PHP Tests (PHPUnit)
        working-directory: backend
        run: |
          ./vendor/bin/phpunit --coverage-text --coverage-xml coverage-report-backend --log-junit junit-report-backend.xml tests

      # Step 6: Upload PHP test results (JUnit format)
      - name: Upload JUnit Test Report for Backend
        uses: actions/upload-artifact@v4
        with:
          name: junit-report-backend
          path: backend/junit-report-backend.xml

      # Optional Step: Run PHPStan for static analysis (backend)
      - name: Run PHPStan Analysis
        working-directory: backend
        run: vendor/bin/phpstan analyse --level=8 src/

      # Optional Step: Run PHP-CS-Fixer for code style checks
      - name: Run PHP-CS-Fixer
        working-directory: backend
        run: vendor/bin/php-cs-fixer fix --dry-run --diff

  frontend:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from the repository (again for frontend)
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'  # Adjust to match your Vue.js version

      # Step 3: Cache npm dependencies
      - name: Cache npm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Step 4: Install Node.js dependencies (for Vue.js)
      - name: Install Node.js Dependencies
        run: npm install --prefix frontend

      # Step 5: Run frontend tests (Jest or Vue Test Utils)
      - name: Run Vue.js Tests (Jest or Vue Test Utils)
        run: npm run test --prefix frontend

      # Step 6: Upload frontend test results (JUnit format or Jest output)
      - name: Upload Test Report for Frontend
        uses: actions/upload-artifact@v4
        with:
          name: junit-report-frontend
          path: frontend/test-results.xml  # Adjust to match your test result output location
