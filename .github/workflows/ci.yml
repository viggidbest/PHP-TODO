name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    name: Detect File Changes
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for file changes
        uses: dorny/paths-filter@v3.0.2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
              - '.github/workflows/ci.yml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/ci.yml'

  backend:
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    name: Backend CI

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: sqlite, pdo_sqlite
          tools: composer
          coverage: pcov

      - name: Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP Dependencies
        working-directory: backend
        run: composer install --no-progress --no-suggest --prefer-dist
      
      - name: PHP Lint
        run: |
          echo "Running PHP lint..."
          # Lint only your source code, ignoring vendor
          find backend -path "backend/vendor" -prune -o -name "*.php" -print0 | xargs -0 -n1 php -l

      - name: Run PHPUnit Tests
        working-directory: backend
        run: |
          mkdir -p coverage-report-backend
          ./vendor/bin/phpunit --coverage-clover coverage-report-backend/clover.xml tests

      - name: Run Liquibase Migrations (SQLite)
        working-directory: backend
        run: |
          mkdir -p ../db/lib
          curl -L -o ../db/lib/sqlite-jdbc.jar https://repo1.maven.org/maven2/org/xerial/sqlite-jdbc/3.42.0.0/sqlite-jdbc-3.42.0.0.jar

          docker run --rm \
            -v "${{ github.workspace }}/backend:/workspace" \
            -v "${{ github.workspace }}/db/changelogs:/workspace/changelogs" \
            -v "${{ github.workspace }}/db/lib:/workspace/lib" \
            liquibase/liquibase \
            --url="jdbc:sqlite:/workspace/todo.sqlite3" \
            --changeLogFile=changelogs/db.changelog-master.xml \
            --driver=org.sqlite.JDBC \
            --classpath=/workspace/lib/sqlite-jdbc.jar \
            --search-path=/workspace update
      - name: Start PHP Server
        working-directory: backend
        run: |
          php -S 127.0.0.1:8000 -t . > server.log 2>&1 &
          echo "Server started in background."

      - name: Wait for Server
        run: |
          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:8000 >/dev/null; then
              echo "✅ Server is up!"
              exit 0
            fi
            echo "Waiting for server..."
            sleep 2
          done
          echo "❌ Server failed to start. Dumping log:"
          cat backend/server.log
          exit 1

      - name: Install Newman (Postman CLI)
        run: npm install -g newman

      - name: Run Postman Tests
        run: |
          newman run backend/tests/postman/todo_api_collection.json \
            -r cli,json \
            --reporter-json-export backend/newman-results.json

      - name: Upload Newman Report
        uses: actions/upload-artifact@v4
        with:
          name: newman-report
          path: backend/newman-results.json

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=viggidbest_PHP-TODO
            -Dsonar.organization=viggidbest
            -Dsonar.sources=backend
            -Dsonar.tests=backend/tests
            -Dsonar.php.coverage.reportPaths=backend/coverage-report-backend/clover.xml
            -Dsonar.exclusions=backend/tests/**,backend/coverage-html/**,backend/vendor/**
            -Dsonar.coverage.exclusions=backend/index.php,backend/coverage-html/**,backend/coverage-html/_js/**
            -Dsonar.qualitygate.wait=true
            -Dsonar.verbose=true


      - name: Check Sonar Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  frontend:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    name: Frontend CI

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'

      - name: Cache npm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Frontend Dependencies
        run: npm ci --prefix frontend
      
      - name: Run Tests with Coverage
        run: npm run test --prefix frontend -- --coverage

      - name: List coverage directory contents
        run: ls -la ./frontend/coverage/

      - name: Check Coverage Threshold
        working-directory: frontend
        run: node check-coverage.js

      - name: Run StandardJS Lint
        run: npm run lint --prefix frontend

        
      # - name: Upload Frontend Test Report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: junit-report-frontend
      #     path: frontend/test-results.xml

      # - name: SonarCloud Scan (Frontend)
      #   uses: SonarSource/sonarqube-scan-action@v5.0.0
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     args: >
      #       -Dsonar.projectKey=viggidbest_PHP-TODO
      #       -Dsonar.organization=viggidbest
      #       -Dsonar.sources=frontend/src
      #       -Dsonar.tests=frontend/tests
      #       -Dsonar.test.inclusions=frontend/tests/**/*.spec.js,frontend/tests/**/*.test.js
      #       -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
      #       -Dsonar.exclusions=frontend/node_modules/**,frontend/dist/**,frontend/coverage/**,frontend/tests/**,frontend/vite.config.js,frontend/vitest.config.js
      #       -Dsonar.qualitygate.wait=true
      #       -Dsonar.verbose=true

      # - name: Check Sonar Quality Gate (Frontend)
      #   uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: https://sonarcloud.io


  deploy_prod:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: >
      github.ref == 'refs/heads/main' &&
      (
        (needs.backend.result == 'success' && needs.frontend.result == 'skipped') ||
        (needs.backend.result == 'skipped' && needs.frontend.result == 'success') ||
        (needs.backend.result == 'success' && needs.frontend.result == 'success')
      )

    steps:
      - name: Deploy Placeholder
        run: echo "🚀 Deploying PHP-TODO to production…"
