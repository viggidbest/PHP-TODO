name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    name: Detect File Changes
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for file changes
        uses: dorny/paths-filter@v3.0.2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
              - '.github/workflows/ci.yml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/ci.yml'

  backend:
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    name: Backend CI

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: sqlite, pdo_sqlite
          tools: composer
          coverage: pcov

      - name: Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP Dependencies
        working-directory: backend
        run: composer install --no-progress --no-suggest --prefer-dist

      - name: Run PHPUnit Tests
        working-directory: backend
        run: |
          mkdir -p coverage-report-backend
          ./vendor/bin/phpunit --coverage-clover coverage-report-backend/clover.xml tests

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=viggidbest_PHP-TODO
            -Dsonar.organization=viggidbest
            -Dsonar.sources=backend
            -Dsonar.tests=backend/tests
            -Dsonar.php.coverage.reportPaths=backend/coverage-report-backend/clover.xml
            -Dsonar.exclusions=backend/tests/postman/**/*.json
            -Dsonar.qualitygate.wait=true
            -Dsonar.verbose=true

      - name: Check Sonar Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  frontend:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    name: Frontend CI

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'

      - name: Cache npm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Node.js Dependencies
        run: npm install --prefix frontend

      - name: Run Vue.js Tests
        run: npm run test --prefix frontend

      - name: Snyk Code Scan (Frontend)
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --severity-threshold=medium
          project: frontend

      - name: Upload Frontend Test Report
        uses: actions/upload-artifact@v4
        with:
          name: junit-report-frontend
          path: frontend/test-results.xml

  deploy_prod:
    if: github.ref == 'refs/heads/main'
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    name: Deploy to Production

    steps:
      - name: Deploy Placeholder
        run: echo "ðŸš€ Deploying PHP-TODO to productionâ€¦"
